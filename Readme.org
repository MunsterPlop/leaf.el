#+author: conao
#+date: <2018-10-25 Thu>

* leaf.el
[[https://github.com/conao3/leaf.el][https://img.shields.io/github/tag/conao3/leaf.el.svg?style=flat-square]]
[[https://travis-ci.org/conao3/leaf.el][https://img.shields.io/travis/conao3/leaf.el/master.svg?style=flat-square]]
[[https://github.com/conao3/leaf.el][https://img.shields.io/github/license/conao3/leaf.el.svg?style=flat-square]]

- [[What is it?]]
- [[How to use?]]
- [[Syntaxes]]
  - [[Basic keywords]]
    - [[none (keyword)]]
    - [[:require keyword]]
    - [[:ensure keyword]]
  - [[Configuration keywords]]
    - [[:init keyword]]
    - [[:bind, :bind* keyword]]
    - [[:pre-setq :setq keyword]]
    - [[:setq-default :custom-set-variables keyword]]
    - [[:config keyword]]
  - [[Condition keywords]]
    - [[:disabled keyword]]
    - [[:if, :when, :unless keyword]]
  - [[Documentation keywords]]
- [[Developer information]]
  - [[leaf.el mechanism]]
  - [[Adding custom keyword(s)]]
- [[Why We support Emacs-22?]]
- [[Welcome PR]]
- [[Special Thanks]]

* What is it?
~leaf.el~ is yet another [[https://github.com/jwiegley/use-package][use-package]].

~leaf.el~ has strong conditional branching symbols, 
making your Emacs configuration simpler.

It operates from Emacs-22, obtains partner [[https://github.com/conao3/feather.el][feather]] and realizes Emacs packages and configurations which can be regenerated. 

You do not have to worry about errors due to reinstallation or environmental differences.

* How to use?
Put ~leaf.el~ at any folder added ~load-path~.
Then ~(require 'leaf)~ and use like ~use-pacakge~

#+BEGIN_SRC emacs-lisp
  ;; add to load-path
  ;; (locate-user-emacs-file "site-lisp/leaf.el")
  ;;  => "~/.emacs.d/local/26.1/site-lisp/leaf.el"

  (add-to-list 'load-path (locate-user-emacs-file "site-lisp/leaf.el"))
  (add-to-list 'load-path (locate-user-emacs-file "site-lisp/feather.el"))

  (require 'leaf)

  (leaf package
    :config
    (add-list-to-list 'package-archives
      '(("org"       . "https://orgmode.org/elpa/")
        ("melpa"     . "https://melpa.org/packages/")
        ("marmalade" . "https://marmalade-repo.org/packages/")))
    (package-initialize))

  (leaf bind-key :ensure t)
#+END_SRC
* Syntaxes
All below examples are excerpts from ~leaf-tests.el~.

These examples are defined in the following format.
We expect FORM will be expanded to EXPECT.
#+begin_src emacs-lisp
  (cort-deftest TESTCASE-NAME
    (match-expansion
     FORM                  ; will be expand by `macroexpand-1'
     'EXPECT))             ; expect FORM's expansion will be EXPECT (test `equal')

  (cort-deftest TESTCASE-NAME
    (match-expansion-let (LET-ENV)
      FORM                 ; will be expanded by `macroexpand-1' in LET-ENV
      'EXPECT))            ; expect FORM's expansion will be EXPECT (test `equal')

  ;; Emacs-22, Emacs-23 can't define `macroexpand-1', branch EXPECT form.
  (cort-deftest TESTCASE-NAME
    (leaf-match
     FORM
     ('EXPECT              ; (macroexpand-1 FORM) will be EXPECT
      'EXPECT-23)))        ; (macroexpand FORM) will be EXPECT-23

  ;; test functions, macros return boolean value
  (defun rt () t)
  (defun rnil () nil)
  (defmacro mt () `(rt))
  (defmacro mnil () `(rnil))
#+end_src

** Basic keywords
*** none (keyword)
If ~leaf~ use without specifying any symbol, it simply works as a substitute for ~require~.
#+begin_src emacs-lisp
  (cort-deftest leaf-test:/simple-none
    (match-expansion
     (leaf foo)
     '(progn
        (require 'foo))))
#+end_src

*** :require keyword
~leaf~ interprets that it is given default by ~:require t~.

~leaf~ do not ~require~ anything when ~nil~ is given, 
and if give multiple values it ~require~ each package.

#+begin_src emacs-lisp
  (cort-deftest leaf-test/:simple-require
    (match-expansion
     (leaf foo
           :require t     ; not necessary to declare this specifically (default)
           :config (setq bar 'baz))
     '(progn
        (require 'foo)
        (setq bar 'baz))))

  (cort-deftest leaf-test/:simple-require-nil
    (match-expansion
     (leaf foo
           :require nil
           :config (setq bar 'baz))
     '(progn
        (setq bar 'baz))))

  (cort-deftest leaf-test/:simple-multi-require
    (match-expansion
     (leaf foo
           :require foo-hoge foo-piyo
           :config (setq bar 'baz))
     '(progn
        (require foo-hoge)
        (require foo-piyo)
        (setq bar 'baz))))
#+end_src

*** :ensure keyword
~:ensure~ provide package download, compile frontend for 
package manager for example, ~feather.el~ and ~package.el~ etc...

You can customize backend to process ~:ensure~ keyword.
#+BEGIN_SRC emacs-lisp
  ;; use package.el as :ensure backend
  (setq leaf-backend/:ensure 'package)

  ;; use feather.el as :ensure backend
  (setq leaf-backend/:ensure 'feather)

  ;; use no package as :ensure backend (disable :ensure)
  (setq leaf-backend/:ensure nil)
#+END_SRC

~leaf.el~ provide ~feather.el~ and ~package.el~ backend,
but it's easy to create other package manager's backend.

Of course, setting and requiring of the backend itself must be
completed before using ~:ensure~ keyword.
** Configuration keywords
*** :init keyword
~:init~ keyword expect sexp will be evaluated before ~require~ package.

#+begin_src emacs-lisp
  (cort-deftest leaf-test/:simple-init
    (match-expansion
     (leaf foo
           :init
           (setq bar1 'baz)
           (setq bar2 'baz))
     '(progn
        (progn
          (setq bar1 'baz)
          (setq bar2 'baz))
        (progn
          (require 'foo)))))
#+end_src

*** :bind, :bind* keyword
~:bind~ provide ~bind-key.el~ frontend.

You can customize backend to process ~:ensure~ keyword.
#+BEGIN_SRC emacs-lisp
  ;; use package.el as :bind backend
  (setq leaf-backend/:bind  'bind-key
        leaf-backend/:bind* 'bind-key)

  ;; use no package as :bind backend (disable :bind, bind*)
  (setq leaf-backend/:bind  nil
        leaf-backend/:bind* nil)
#+END_SRC

~leaf.el~ provide ~bind-key.el~ backend,
but it's easy to create other package manager's backend.

#+BEGIN_SRC emacs-lisp
  (cort-deftest leaf-test/:simple-bind
    (match-expansion-let ((leaf-backend/:bind 'bind-key))
      (leaf foo
        :bind (("M-s O" . moccur)
               :map isearch-mode-map
               ("M-o" . isearch-moccur)
               ("M-O" . isearch-moccur-all))
        :init
        (setq isearch-lazy-highlight t)
        :config
        (leaf moccur-edit))
      '(progn
         (progn
           (setq isearch-lazy-highlight t))
         (progn
           (require 'foo)
           (funcall #'leaf-backend/:bind-bind-key 'foo
                    '(("M-s O" . moccur)
                      :map isearch-mode-map
                      ("M-o" . isearch-moccur)
                      ("M-O" . isearch-moccur-all)))
           (leaf moccur-edit)))))
#+END_SRC
Of course, setting and requiring of the backend itself must be
completed before using ~:ensure~ keyword.

*** :pre-setq :setq keyword
~pre-setq~, ~post-setq~ to setq before and after ~require~ package.
#+BEGIN_SRC emacs-lisp
  (cort-deftest leaf-test/:simple-pre-setq
    (match-expansion
     (leaf foo
       :pre-setq ((bar . 'baz))
       :init (foo-pre-init)
       :config (foo-post-init))
     '(progn
        (setq bar 'baz)
        (progn
          (progn
            (foo-pre-init))
          (progn
            (require 'foo)
            (foo-post-init))))))

  (cort-deftest leaf-test/:simple-post-setq
    (match-expansion
     (leaf foo
       :setq ((bar . 'baz))
       :init (foo-pre-init)
       :config (foo-post-init))
     '(progn
        (progn
          (foo-pre-init))
        (progn
          (require 'foo)
          (setq bar 'baz)
          (foo-post-init)))))
#+END_SRC

*** :setq-default :custom-set-variables keyword
~:setq-default~, ~:custom-set-variables~ to itself after ~require~ package
#+BEGIN_SRC emacs-lisp
  (cort-deftest leaf-test/:simple-post-setq
    (match-expansion
     (leaf foo
       :setq ((bar . 'baz))
       :init (foo-pre-init)
       :config (foo-post-init))
     '(progn
        (progn
          (foo-pre-init))
        (progn
          (require 'foo)
          (setq bar 'baz)
          (foo-post-init)))))

  (cort-deftest leaf-test/:simple-custom-set-variables
    (match-expansion
     (leaf foo
       :custom-set-variables ((bar . 'baz))
       :init (foo-pre-init)
       :config (foo-post-init))
     '(progn
        (progn
          (foo-pre-init))
        (progn
          (require 'foo)
          (custom-set-variables '(bar 'baz))
          (foo-post-init)))))
#+END_SRC
*** :config keyword
~:config~ keyword expect sexp will evaluated after ~require~ package.

#+BEGIN_SRC emacs-lisp
  (cort-deftest leaf-test/:simple-config
    (match-expansion
     (leaf foo :config (setq bar 'baz))
     '(progn
        (require 'foo)
        (setq bar 'baz))))

  (cort-deftest leaf-test/:simple-init-config
    (match-expansion
     (leaf foo :require foo-hoge foo-piyo
           :init
           (setq bar1 'baz)
           (setq bar2 'baz)
           :config
           (setq bar3 'baz)
           (setq bar4 'baz))
     '(progn
        (progn
          (setq bar1 'baz)
          (setq bar2 'baz))
        (progn
          (require foo-hoge)
          (require foo-piyo)
          (setq bar3 'baz)
          (setq bar4 'baz)))))
#+END_SRC
** Condition keywords
*** :disabled keyword
~:disabled~ keyword expect boolean.

If you put ~:disabled t~ keyword, that ~leaf~ block just converting to nil.

Ignore the specification of ~:disabled~ by setting ~t~ to ~nil~.

~:disabled~ will adopt the value of value declared first.
#+begin_src emacs-lisp
  ;; simple :disabled t pattern
  ;; :disabled t => disable block (convert to just nil)
  (cort-deftest leaf-test:/simple-disabled-t
    (match-expansion
     (leaf foo :disabled t)
     'nil))

  ;; simple :disabled nil pattern
  ;; :disabled nil => ignore :disabled
  (cort-deftest leaf-test:/simple-disabled-nil
    (match-expansion
     (leaf foo :disabled nil)
     '(progn
        (require 'foo))))

  ;; multiple :disabled value is ok, adoped first value.
  ;; :disabled t nil => :disabled t => disable block
  (cort-deftest leaf-test:/disabled-4-
    (match-expansion
     (leaf foo :disabled t nil :config (message "bar"))
     'nil))

  ;; multiple :disabled keyword is ok, adoped first value.
  ;; :disabled nil t t => :disabled nil => ignore :disabled
  (cort-deftest leaf-test:/disabled-5+
    (match-expansion
     (leaf foo :disabled nil t :config (message "bar") :disabled t)
     '(progn
        (require 'foo)
        (message "bar"))))

  ;; :disabled keyword value allowed functions and macros returns boolean value.
  ;; :disable (rt) (rnil) (rt) => :disable t nil t => :disable t
  (cort-deftest leaf-test:/disabled-5++
    (match-expansion
     (leaf foo :disabled (rnil) (rt) :config (message "bar") :disabled (rt))
     '(progn
        (require 'foo)
        (message "bar"))))
#+end_src

*** :if, :when, :unless keyword
~:if~, ~:when~, ~:unless~ keywords expect sexp return boolean or just boolean value
and wrap converted sexp specified function.

If specified multiple those keywords, evaluate sexp in ~and~.
#+begin_src emacs-lisp
  ;; simple :if pattern
  (cort-deftest leaf-test:/simple-if
    (match-expansion
     (leaf foo :if t)
     '(if t
          (progn
            (progn
              (require 'foo))))))

  ;; simple :when pattern
  (cort-deftest leaf-test/:simple-when
    (leaf-match
     (leaf foo :when t)
     ('(when t
         (progn
           (require 'foo)))
      '(if t
           (progn
             (progn
               (require 'foo)))))))

  ;; simple :unless pattern
  (cort-deftest leaf-test/:simple-unless
    (leaf-match
     (leaf foo :unless t)
     ('(unless t
         (progn
           (require 'foo)))
      '(if t
           nil
         (progn
           (require 'foo))))))

  ;; multiple :if pattern
  (cort-deftest leaf-test/:simple-multi-if
    (match-expansion
     (leaf foo :if (rt) :if (rnil) (mt))
     '(if (and (rt) (rnil) (mt))
          (progn
            (progn
              (require 'foo))))))

  ;; multiple condition pattern
  ;; sorted in the order :if, :when, :unless and merge.
  (cort-deftest leaf-test/:simple-multi-conds
    (match-expansion
     (leaf foo :if (rt) :when (rnil) (mt) :unless (rt) :if (rnil))
     '(if (and (rt) (rnil))
          (progn
            (when (and (rnil) (mt))
              (unless (rt)
                (progn
                  (require 'foo))))))))

  ;; if you want to evaluate sexp in `or', just specify that sexp.
  (cort-deftest leaf-test/:if-2
    (match-expansion
     (leaf foo :if (or (rt) (rnil)))
     '(if (or (rt) (rnil))
          (progn
            (progn
              (require 'foo))))))
#+end_src

** Documentation keywords
~leaf.el~ can describe a document with an affinity grammar.
By default, ~:doc~, ~:file~, ~:url~ keywords are provided.

In fact, these keywords are simply ignored.

#+BEGIN_SRC emacs-lisp
  (cort-deftest leaf-test/:simple-doc-keyword
    (match-expansion
     (leaf foo
       :doc "this package is awesome!!"
       :require nil
       :config (setq bar 'baz))
     '(progn
        (setq bar 'baz))))

  (cort-deftest leaf-test/:simple-doc-keywords
    (match-expansion
     (leaf foo
       :doc "this package is awesome!!"
       :file "~/path/to/package/file.el"
       :url "https://www.example.com/"
       :require nil
       :config (setq bar 'baz))
     '(progn
        (setq bar 'baz))))
#+END_SRC

I think that you can use various ways of using such as
describing the URL you referred to, writing a brief description of the package,
writing a file path for FFAP.

If you want other keywords, you can easily add them. (see source)
#+BEGIN_SRC emacs-lisp
  ;; top-level operation, but don't do anything when don't need it.
  ;; (eg when loading multiple times)
  (mapc (lambda (x)
          (unless (memq x leaf-keywords)
            (leaf-add-doc-keyword x)))
        (reverse '(:doc :file :url)))
#+END_SRC

* Developer information
~leaf.el~ creates the intended elisp code from DSL with a simple mechanism.

It is clear what internal conversion is done and it is also easy to customize it.
** leaf.el mechanism
*** ~leaf (name &rest args)~ macro
This is ~leaf.el~ frontend macro. Users use only this macro.

Process.
1. Pass arguments to ~leaf-core~.

*** ~leaf-core (name args)~ function
This is the core process for leaf macro expansion.

Process.
1. ~leaf-append-defaults~ to append default value (~leaf-defaults~) to ARGS
2. ~leaf-normalize-plist~ to normalize pseudo-plist, ARGS
3. ~leaf-sort-values-plist~ to sort ARGS
4. pass NAME and ARGS to ~leaf-process-keywords~

**** ~leaf-append-defaults (plist)~ function
Append leaf default values to PLIST.
See ~leaf-defaults~. You can customize this value.

EXAMPLE:
#+BEGIN_SRC emacs-lisp
  (leaf-append-defaults nil)
  -> (:init nil :require t)

  (leaf-append-defaults '(:require foo))
  -> (:require foo :init nil :require t)
#+END_SRC

**** ~leaf-normalize-plist (plsit mergep)~ function
Given a pseudo-PLIST, return PLIST,
if MERGEP is t, return well-formed PLIST.

MERGEP every ~t~ in leaf.

EXAMPLE:
#+BEGIN_SRC emacs-lisp
  (leaf-normalize-plist
    '(:defer t
      :config (message "a") (message "b")
      :config (message "c")) nil)
   -> (:defer (t)
       :config ((message "a") (message "b"))
       :config ((message "c")))

  (leaf-normalize-plist
    '(:defer t
      :config (message "a") (message "b")
      :config (message "c")) t)
   -> (:defer (t)
       :config ((message "a") (message "b") (message "c"))
#+END_SRC

**** ~leaf-sort-values-plist (plist)~ function
Given a list-valued PLIST, return sorted-list PLIST by order ~leaf-keywords~.

EXAMPLE:
(leaf-sort-values-plist
  '(:config (message "a")
    :disabled (t)))
 -> (:disabled (t)
     :config (message "a"))

*** ~leaf-pcocess-keywords (name plist)~ function
Process keywords for NAME.
The KEY and VALUE are taken from the PLIST and pass to the handler.

The handler is named leaf-handler/KEY.

** Adding custom keyword(s)
~leaf.el~ can easily be expanded by adding keywords.

Actually, it is realized by two steps of adding keyword and adding handler.

Example:
#+BEGIN_SRC emacs-lisp
  (cort-deftest leaf-test/:simple-keyword-add
    (match-expansion
     (leaf foo
       :require h s :message-post-require "foo!" :config (setq bar 'baz))
     '(progn
        (require h)
        (require s)
        (message "foo!")
        (setq bar 'baz))))

  (cort-deftest leaf-test/:simple-keyword-add-2
    (match-expansion
     (leaf foo
       :require h s
       :message-post-require "foo!"
       :config (setq bar 'baz)
       :message-post-require "post!"
       :message-pre-require "pre")
     '(progn
        (message "pre")
        (require h)
        (require s)
        (message "foo!")
        (message "post!")
        (setq bar 'baz))))

  (cort-deftest leaf-test/:simple-keyword-list-add
    (match-expansion
     (leaf foo
       :require h s
       :tmp-pre (message "start tmp")
       :tmp-post (setq foo 'bar)
       :tmp-pre (message "really start tmp!"))
     '(progn
        (require h)
        (require s)
        (message "start tmp")
        (message "really start tmp!")
        (setq foo 'bar))))
#+END_SRC

*** Add keyword(s)
The keyword has an appropriate place in ~leaf-keywords~.

Because the keywords are sorted in order of ~leaf-keywords~,
and they are processed and expanded in that order.

You can use these functions to add keyword(s)
- ~leaf-add-keyword-before (target belm)~
- ~leaf-add-keyword-after (target aelm)~
- ~leaf-add-keyword-list-before (targetlst belm)~
- ~leaf-add-keyword-list-after (targetlst aelm)~

If you message before ~require~, you should use
~(leaf-add-keyword-before :message-pre-require :require)~.

Or if you message after ~require~, you should use
~(leaf-add-keyword-after :message-post-require :require)~.

You can add keywords like,
~(leaf-add-keyword-list-after '(:tmp-pre :tmp-post) :config)~

*** Define handler
Then, you should define a handler for new keyword(s) each.

NOTE: Since VALUE is a list, be careful when implementing a handler.
#+BEGIN_SRC emacs-lisp
  (defun leaf-handler/:message-pre-require (name value rest)
    "process :message-pre-require."
    (let ((body (leaf-process-keywords name rest)))
      `(,@(mapcar (lambda (x) `(message ,x)) value) ,@body)))

  (defun leaf-handler/:message-post-require (name value rest)
    "process :message-post-require."
    (let ((body (leaf-process-keywords name rest)))
      `(,@(mapcar (lambda (x) `(message ,x)) value) ,@body)))

  (defun leaf-handler/:tmp-pre (name value rest)
    "process :tmp-pre."
    (let ((body (leaf-process-keywords name rest)))
      `(,@value ,@body)))

  (defun leaf-handler/:tmp-post (name value rest)
    "process :tmp-post."
    (let ((body (leaf-process-keywords name rest)))
      `(,@value ,@body)))
#+END_SRC
* Why We support Emacs-22?
Bundling Emacs-22.1 on macOS 10.13 (High Sierra), we support this.

* Welcome PR
We welcome PR!
Travis Cl test ~leaf-test.el~ with all Emacs version 23 or above.

I think that it is difficult to prepare the environment locally, 
so I think that it is good to throw PR and test Travis for the time being!
Feel free throw PR!

* Special Thanks
Advice and comments given by [[http://emacs-jp.github.io/][Emacs-JP]]'s forum member has been a great help
in developing ~leaf.el~.

Thank you very much!!
